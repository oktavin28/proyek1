# -*- coding: utf-8 -*-
"""Proyek1_ Prediksi Harga Mobil.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/174qumxnaKmFUTrDeErRe0ySrUqjqFw71

# Proyek Pertama - Prediksi Harga Mobil

Nama : Nur Oktavin Idris

Dataset : [kaggle](https://www.kaggle.com/datasets/CooperUnion/cardataset/data)

## Import Library
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score

"""## Load the Dataset"""

df = pd.read_csv('data.csv')
df.head()

df.info()

"""Dataset berisi informasi tentang kendaraan dengan fitur-fitur berikut:

    

*   Make: Merek mobil.

*    Year: Tahun produksi.

*   Engine Fuel Type: Jenis bahan bakar.

*   Engine HP: Tenaga mesin (Horsepower).

*   Engine Cylinders: Jumlah silinder mesin.

*   Transmission Type: Jenis transmisi.

*   Driven_Wheels: Sistem penggerak roda.
*   Vehicle Size: Ukuran kendaraan.

*   Number of Doors : Jumlah pintu
*   Market Category
*    Vehicle Style: Gaya kendaraan.


*   highway MPG: Efisiensi bahan bakar di jalan raya.


*   city mpg: Efisiensi bahan bakar di dalam kota.


*   Popularity: Popularitas merek mobil.


*    MSRP: Harga kendaraan (Target).

## Data Preprocessing

Menangani Duplikat dan Missing Values
"""

df.duplicated().sum()

df = df.drop_duplicates()
df.duplicated().sum()

df.isnull().sum()

# Hapus Kolom yang tidak mempengaruhi target (harga/MSRP)
df = df.drop(columns=["Model", "Market Category", "Number of Doors"], errors='ignore')

df.shape

"""Jumlah datasets menjadi 11199 dikarenakan telah menghapus 3 kolom yang tidak relevan dan menghapus data duplikat"""

df[df.isnull().any(axis=1)]

# Menangani Missing Values
df = df.fillna(df.median(numeric_only=True))
df = df.fillna(df.mode().iloc[0])

df.isnull().sum()

"""Exploratory Data Analysis"""

plt.figure(figsize=(12, 8))
correlation_matrix = df.select_dtypes(include=['float64', 'int64']).corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Matrix untuk Fitur Numerik ")
plt.show()

# Melihat kolerasi antara fitur kategorik dengan fitur MSRP (harga)
cat_features = df.select_dtypes(include='object').columns.to_list()

for col in cat_features:
  sns.catplot(x=col, y="MSRP", kind="bar", dodge=False, height=4, aspect=3, data=df, palette="Set3")
  plt.title("Rata-rata 'MSRP' Relatif terhadap - {}".format(col))
  plt.xticks(rotation=45)
  plt.show()

# Memilih fitur yang relevan
fitur = [
    "Make", "Year", "Engine Fuel Type", "Engine HP", "Engine Cylinders",
    "Transmission Type", "Driven_Wheels", "Vehicle Size", "Vehicle Style",
    "highway MPG", "city mpg", "Popularity"
]
target = "MSRP"

# Split data X (fitur) and y (target)
X = df[fitur]
y = df[target]

"""## Encoding"""

categorical_cols = X.select_dtypes(include=["object"]).columns
label_encoder = LabelEncoder()
for col in categorical_cols:
    X[col] = label_encoder.fit_transform(X[col])

X.head()

"""## Normalisasi"""

scaler = StandardScaler()
numeric_cols = X.select_dtypes(include=["float64", "int64"]).columns
X.loc[:, numeric_cols] = scaler.fit_transform(X[numeric_cols])

X.head()

"""## Train-Test Split"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f'Total dataset: {len(X)}')
print(f'Total data latih: {len(X_train)}')
print(f'Total data uji: {len(X_test)}')

"""## Train the Model"""

from sklearn.linear_model import Ridge
Random_Forest = RandomForestRegressor(random_state=42, n_estimators=100, max_depth= 20)
Random_Forest.fit(X_train, y_train)

gradient_boosting = GradientBoostingRegressor(n_estimators=200, max_depth= 5, learning_rate=0.2)
gradient_boosting.fit(X_train, y_train)

linear_regression = LinearRegression(fit_intercept=True, n_jobs=-1)
linear_regression.fit(X_train, y_train)

"""## Evaluate the Model"""

y_pred_rf = Random_Forest.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2_rf = r2_score(y_test, y_pred)

y_pred_gb = gradient_boosting.predict(X_test)
mse_gb = mean_squared_error(y_test, y_pred_gb)
r2_gb = r2_score(y_test, y_pred_gb)

y_pred_lr = linear_regression.predict(X_test)
mse_lr = mean_squared_error(y_test, y_pred_lr)
r2_lr = r2_score(y_test, y_pred_lr)

results = pd.DataFrame(columns=['MSE', 'R2 Score'], index=['Random Forest','Gradient Boosting','Linear Regression'])

results.loc['Random Forest', 'MSE'] = mse
results.loc['Random Forest', 'R2 Score'] = r2_rf
results.loc['Gradient Boosting', 'MSE'] = mse_gb
results.loc['Gradient Boosting', 'R2 Score'] = r2_gb
results.loc['Linear Regression', 'MSE'] = mse_lr
results.loc['Linear Regression', 'R2 Score'] = r2_lr
results

plt.bar('Random Forest', r2_rf)
plt.bar('Gradient Boosting', r2_gb)
plt.bar('Linear Regression', r2_lr)
plt.title("Perbandingan Model");
plt.xlabel('Model');
plt.ylabel('r2_score');
plt.show()

"""## Predict Prices"""

# Prediksi data uji dengan model Gradient Boosting
predictions = pd.DataFrame({'Actual': y_test.values, 'Predicted': y_pred_gb})
predictions.head()